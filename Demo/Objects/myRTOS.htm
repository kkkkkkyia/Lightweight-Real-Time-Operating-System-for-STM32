<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\myRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\myRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Oct 23 10:32:07 2024
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; My_StartScheduler &rArr; My_TimerTaskCreate &rArr; My_TaskCreate &rArr; My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[55]">MY_MergeMemBlock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">MY_MergeMemBlock</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[15]">DMAChannel1_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[16]">DMAChannel2_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[17]">DMAChannel3_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[18]">DMAChannel4_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[19]">DMAChannel5_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[1a]">DMAChannel6_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[1b]">DMAChannel7_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[37]">My_IdleTask</a> from my_task.o(i.My_IdleTask) referenced from my_task.o(i.My_IdleTaskCreate)
 <LI><a href="#[38]">My_TimerTaskEntry</a> from my_timer.o(i.My_TimerTaskEntry) referenced from my_timer.o(i.My_TimerTaskCreate)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[3a]">TimerHandleFunc</a> from main.o(i.TimerHandleFunc) referenced from main.o(i.main)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f1xx.o(.text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f1xx.o(.text)
 <LI><a href="#[39]">fputc</a> from serial.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[3b]">func1</a> from main.o(i.func1) referenced from main.o(i.main)
 <LI><a href="#[3c]">func2</a> from main.o(i.func2) referenced from main.o(i.main)
 <LI><a href="#[3d]">func3</a> from main.o(i.func3) referenced from main.o(i.main)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[6]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[26]">vTimer2IntHandler</a> from main.o(i.vTimer2IntHandler) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[2f]">vUARTInterruptHandler</a> from serial.o(i.vUARTInterruptHandler) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[8]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f1xx.o(RESET)
 <LI><a href="#[9]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_stm32f1xx.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[47]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>vPortSVCHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>xPortPendSVHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[43]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>ARCH_PrepareStack</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, my_arch_1.o(i.ARCH_PrepareStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ARCH_PrepareStack
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
</UL>

<P><STRONG><a name="[97]"></a>ATCH_IsInterruptContext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_arch_1.o(i.ATCH_IsInterruptContext))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[b4]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[57]"></a>My_AddTaskToDelayList</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, my_scheduler.o(i.My_AddTaskToDelayList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = My_AddTaskToDelayList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeSortList
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToDelay
</UL>

<P><STRONG><a name="[59]"></a>My_AddTaskToEndlessBlockList</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, my_scheduler.o(i.My_AddTaskToEndlessBlockList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_AddTaskToEndlessBlockList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToBlock
</UL>

<P><STRONG><a name="[5b]"></a>My_AddTaskToReadyList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, my_scheduler.o(i.My_AddTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SetPriorityActive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskSuspendToReady
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelayToReady
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskBlockToReady
</UL>

<P><STRONG><a name="[5d]"></a>My_AddTaskToSuspendList</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, my_scheduler.o(i.My_AddTaskToSuspendList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = My_AddTaskToSuspendList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToSuspend
</UL>

<P><STRONG><a name="[58]"></a>My_AddTaskToTimeSortList</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, my_scheduler.o(i.My_AddTaskToTimeSortList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeoutBlockedList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToDelayList
</UL>

<P><STRONG><a name="[5e]"></a>My_AddTaskToTimeoutBlockedList</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, my_scheduler.o(i.My_AddTaskToTimeoutBlockedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = My_AddTaskToTimeoutBlockedList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeSortList
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToBlock
</UL>

<P><STRONG><a name="[61]"></a>My_CheckDelayTaskWakeup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, my_scheduler.o(i.My_CheckDelayTaskWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = My_CheckDelayTaskWakeup &rArr; My_TaskDelayToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelayToReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckTaskWakeup
</UL>

<P><STRONG><a name="[63]"></a>My_CheckTaskBlockWakeup</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, my_scheduler.o(i.My_CheckTaskBlockWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = My_CheckTaskBlockWakeup &rArr; My_TaskDelayToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelayToReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckTaskWakeup
</UL>

<P><STRONG><a name="[64]"></a>My_CheckTaskWakeup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_CheckTaskWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = My_CheckTaskWakeup &rArr; My_CheckTaskBlockWakeup &rArr; My_TaskDelayToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckTaskBlockWakeup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckDelayTaskWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
</UL>

<P><STRONG><a name="[7f]"></a>My_ClearPriorityActive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_scheduler.o(i.My_ClearPriorityActive))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromReadyList
</UL>

<P><STRONG><a name="[83]"></a>My_ContextSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port.o(i.My_ContextSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
</UL>

<P><STRONG><a name="[65]"></a>My_Free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, my_mem.o(i.My_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_MergeMemBlock
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IdleTaskCreate
</UL>

<P><STRONG><a name="[87]"></a>My_GetCurrentTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_time.o(i.My_GetCurrentTime))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerStart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[82]"></a>My_GetHighestPriorityTask</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, my_task.o(i.My_GetHighestPriorityTask))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_StartScheduler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
</UL>

<P><STRONG><a name="[37]"></a>My_IdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_task.o(i.My_IdleTask))
<BR>[Address Reference Count : 1]<UL><LI> my_task.o(i.My_IdleTaskCreate)
</UL>
<P><STRONG><a name="[69]"></a>My_IdleTaskCreate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, my_task.o(i.My_IdleTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = My_IdleTaskCreate &rArr; My_TaskCreate &rArr; My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_StartScheduler
</UL>

<P><STRONG><a name="[86]"></a>My_IncrementTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, my_time.o(i.My_IncrementTime))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
</UL>

<P><STRONG><a name="[6c]"></a>My_IsSchedulerSuspending</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, my_scheduler.o(i.My_IsSchedulerSuspending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = My_IsSchedulerSuspending &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[6d]"></a>My_KernelInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, my_kernel.o(i.My_KernelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_KernelInit &rArr; My_Mem_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Queue_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimeInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_ScheduleInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Mem_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>My_Malloc</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, my_mem.o(i.My_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = My_Malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_DataAlign
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_QueueCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IdleTaskCreate
</UL>

<P><STRONG><a name="[70]"></a>My_Mem_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, my_mem.o(i.My_Mem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_Mem_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_DataAlign
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
</UL>

<P><STRONG><a name="[76]"></a>My_MutexCreate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, my_mutex.o(i.My_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = My_MutexCreate &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetMutexResource
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>My_QueueCreate</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, my_queue.o(i.My_QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = My_QueueCreate &rArr; My_Malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetQueueResource
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>My_Queue_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, my_queue.o(i.My_Queue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_Queue_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
</UL>

<P><STRONG><a name="[7c]"></a>My_RemoveTaskFromBlockedList</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, my_scheduler.o(i.My_RemoveTaskFromBlockedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_RemoveTaskFromBlockedList
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskBlockToReady
</UL>

<P><STRONG><a name="[7d]"></a>My_RemoveTaskFromDelayList</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_RemoveTaskFromDelayList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_RemoveTaskFromDelayList
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelayToReady
</UL>

<P><STRONG><a name="[7e]"></a>My_RemoveTaskFromReadyList</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, my_scheduler.o(i.My_RemoveTaskFromReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_RemoveTaskFromReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_ClearPriorityActive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToSuspend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToDelay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToBlock
</UL>

<P><STRONG><a name="[80]"></a>My_RemoveTaskFromSuspendList</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_RemoveTaskFromSuspendList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_RemoveTaskFromSuspendList
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskSuspendToReady
</UL>

<P><STRONG><a name="[81]"></a>My_Schedule</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, my_scheduler.o(i.My_Schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_Schedule &rArr; ListMoveTail &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetHighestPriorityTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_ContextSwitch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IsSchedulerSuspending
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMoveTail
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemRelease
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[6e]"></a>My_ScheduleInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, my_scheduler.o(i.My_ScheduleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_ScheduleInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
</UL>

<P><STRONG><a name="[85]"></a>My_Scheduler_IncrementTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, my_scheduler.o(i.My_Scheduler_IncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = My_Scheduler_IncrementTick &rArr; My_CheckTaskWakeup &rArr; My_CheckTaskBlockWakeup &rArr; My_TaskDelayToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCheck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IncrementTime
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetCurrentTime
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SystemTickHandle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IsSchedulerSuspending
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckTaskWakeup
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[8a]"></a>My_SemCreate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, my_sem.o(i.My_SemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = My_SemCreate &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetSemResource
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>My_SemGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, my_sem.o(i.My_SemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = My_SemGet &rArr; __My_SemGet &rArr; My_TaskReadyToBlock &rArr; My_AddTaskToTimeoutBlockedList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func3
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func2
</UL>

<P><STRONG><a name="[71]"></a>My_SemInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, my_sem.o(i.My_SemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_SemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
</UL>

<P><STRONG><a name="[8f]"></a>My_SemRelease</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, my_sem.o(i.My_SemRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = My_SemRelease &rArr; My_Schedule &rArr; ListMoveTail &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskBlockToReady
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func1
</UL>

<P><STRONG><a name="[5c]"></a>My_SetPriorityActive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_scheduler.o(i.My_SetPriorityActive))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToReadyList
</UL>

<P><STRONG><a name="[92]"></a>My_StartScheduler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, my_scheduler.o(i.My_StartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = My_StartScheduler &rArr; My_TimerTaskCreate &rArr; My_TaskCreate &rArr; My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IdleTaskCreate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetHighestPriorityTask
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>My_SystemTickHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, my_scheduler.o(i.My_SystemTickHandle))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
</UL>

<P><STRONG><a name="[91]"></a>My_TaskBlockToReady</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_TaskBlockToReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_TaskBlockToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromBlockedList
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemRelease
</UL>

<P><STRONG><a name="[6b]"></a>My_TaskCreate</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, my_task.o(i.My_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = My_TaskCreate &rArr; My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_PrepareStack
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MemCopy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToReadyList
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskCreate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IdleTaskCreate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>My_TaskDelay</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, my_task.o(i.My_TaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = My_TaskDelay &rArr; My_TaskReadyToDelay &rArr; My_AddTaskToDelayList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCH_IsInterruptContext
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetCurrentTime
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IsSchedulerSuspending
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func1
</UL>

<P><STRONG><a name="[62]"></a>My_TaskDelayToReady</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_TaskDelayToReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_TaskDelayToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromDelayList
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckTaskBlockWakeup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckDelayTaskWakeup
</UL>

<P><STRONG><a name="[99]"></a>My_TaskReadyToBlock</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, my_scheduler.o(i.My_TaskReadyToBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = My_TaskReadyToBlock &rArr; My_AddTaskToTimeoutBlockedList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromReadyList
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeoutBlockedList
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToEndlessBlockList
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[98]"></a>My_TaskReadyToDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_TaskReadyToDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = My_TaskReadyToDelay &rArr; My_AddTaskToDelayList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromReadyList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToDelayList
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
</UL>

<P><STRONG><a name="[9a]"></a>My_TaskReadyToSuspend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_TaskReadyToSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_TaskReadyToSuspend &rArr; My_AddTaskToSuspendList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromReadyList
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToSuspendList
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
</UL>

<P><STRONG><a name="[9b]"></a>My_TaskSuspendToReady</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, my_scheduler.o(i.My_TaskSuspendToReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_TaskSuspendToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromSuspendList
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCheck
</UL>

<P><STRONG><a name="[6f]"></a>My_TimeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_time.o(i.My_TimeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
</UL>

<P><STRONG><a name="[89]"></a>My_TimerCheck</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, my_timer.o(i.My_TimerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = My_TimerCheck &rArr; My_TaskSuspendToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskSuspendToReady
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
</UL>

<P><STRONG><a name="[9c]"></a>My_TimerCreate</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, my_timer.o(i.My_TimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_TimerCreate &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetTimerResource
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>My_TimerInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, my_timer.o(i.My_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = My_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
</UL>

<P><STRONG><a name="[9f]"></a>My_TimerStart</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, my_timer.o(i.My_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = My_TimerStart &rArr; My_AddTimerToManager &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetCurrentTime
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTimerToManager
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func2
</UL>

<P><STRONG><a name="[93]"></a>My_TimerTaskCreate</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, my_timer.o(i.My_TimerTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = My_TimerTaskCreate &rArr; My_TaskCreate &rArr; My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_StartScheduler
</UL>

<P><STRONG><a name="[38]"></a>My_TimerTaskEntry</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, my_timer.o(i.My_TimerTaskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_TimerTaskEntry &rArr; My_Schedule &rArr; ListMoveTail &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetCurrentTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToSuspend
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTimerToManager
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_timer.o(i.My_TimerTaskCreate)
</UL>
<P><STRONG><a name="[b2]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[b1]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[a2]"></a>PlatformInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform.o(i.PlatformInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PlatformInit &rArr; UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[af]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[a5]"></a>RCC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[b8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a7]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[ae]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[a8]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[a6]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[aa]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[a9]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[ac]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[ab]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[ad]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[b3]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_systick.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupHardware
</UL>

<P><STRONG><a name="[3a]"></a>TimerHandleFunc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.TimerHandleFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimerHandleFunc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a4]"></a>UART_Init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, serial.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformInit
</UL>

<P><STRONG><a name="[b7]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b6]"></a>USART_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[b5]"></a>USART_Init</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[be]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b9]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ce]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[66]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Mem_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func3
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func1
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerHandleFunc
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[3b]"></a>func1</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.func1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = func1 &rArr; My_TaskDelay &rArr; My_TaskReadyToDelay &rArr; My_AddTaskToDelayList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemRelease
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c]"></a>func2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.func2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = func2 &rArr; My_SemGet &rArr; __My_SemGet &rArr; My_TaskReadyToBlock &rArr; My_AddTaskToTimeoutBlockedList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerStart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemGet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3d]"></a>func3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.func3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = func3 &rArr; My_SemGet &rArr; __My_SemGet &rArr; My_TaskReadyToBlock &rArr; My_AddTaskToTimeoutBlockedList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemGet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 88 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; My_StartScheduler &rArr; My_TimerTaskCreate &rArr; My_TaskCreate &rArr; My_Free &rArr; MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_KernelInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MutexCreate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_QueueCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_StartScheduler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCreate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemCreate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MemCopy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[49]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARCH_PrepareStack
</UL>

<P><STRONG><a name="[67]"></a>vPortEnterCritical</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRaiseBASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MutexCreate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_QueueCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IsSchedulerSuspending
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerStart
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemRelease
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[68]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MutexCreate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_QueueCreate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IsSchedulerSuspending
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerStart
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemRelease
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__My_SemGet
</UL>

<P><STRONG><a name="[c1]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[26]"></a>vTimer2IntHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vTimer2IntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>vUARTInterruptHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial.o(i.vUARTInterruptHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_StartScheduler
</UL>

<P><STRONG><a name="[9]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xPortSysTickHandler &rArr; My_Scheduler_IncrementTick &rArr; My_CheckTaskWakeup &rArr; My_CheckTaskBlockWakeup &rArr; My_TaskDelayToReady &rArr; My_AddTaskToReadyList &rArr; ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Scheduler_IncrementTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRaiseBASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f1xx.o(RESET)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>ListAddAfter</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, my_mem.o(i.ListAddAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Mem_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
</UL>

<P><STRONG><a name="[4e]"></a>ListAddBefore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, my_mem.o(i.ListAddBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_InsertMemBlockToFreeList
</UL>

<P><STRONG><a name="[56]"></a>ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_mem.o(i.ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_MergeMemBlock
</UL>

<P><STRONG><a name="[75]"></a>ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_mem.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Mem_Init
</UL>

<P><STRONG><a name="[74]"></a>MY_DataAlign</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, my_mem.o(i.MY_DataAlign))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Mem_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Malloc
</UL>

<P><STRONG><a name="[54]"></a>MY_InsertMemBlockToFreeList</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, my_mem.o(i.MY_InsertMemBlockToFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MY_InsertMemBlockToFreeList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_MergeMemBlock
</UL>

<P><STRONG><a name="[55]"></a>MY_MergeMemBlock</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, my_mem.o(i.MY_MergeMemBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = MY_MergeMemBlock &rArr;  MY_MergeMemBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_MergeMemBlock
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_InsertMemBlockToFreeList
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Free
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_MergeMemBlock
</UL>

<P><STRONG><a name="[4b]"></a>__ListAdd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_mem.o(i.__ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
</UL>

<P><STRONG><a name="[4c]"></a>ListAddAfter</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, my_scheduler.o(i.ListAddAfter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListAddAfter
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeSortList
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToSuspendList
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToReadyList
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToEndlessBlockList
</UL>

<P><STRONG><a name="[4f]"></a>ListAddBefore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, my_scheduler.o(i.ListAddBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeSortList
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToEndlessBlockList
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMoveTail
</UL>

<P><STRONG><a name="[53]"></a>ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_scheduler.o(i.ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromSuspendList
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromReadyList
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromDelayList
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromBlockedList
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListMoveTail
</UL>

<P><STRONG><a name="[84]"></a>ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_scheduler.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_ScheduleInit
</UL>

<P><STRONG><a name="[5a]"></a>ListIsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_scheduler.o(i.ListIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RemoveTaskFromReadyList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckTaskBlockWakeup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_CheckDelayTaskWakeup
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToTimeSortList
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTaskToEndlessBlockList
</UL>

<P><STRONG><a name="[52]"></a>ListMoveTail</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, my_scheduler.o(i.ListMoveTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ListMoveTail &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDelete
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
</UL>

<P><STRONG><a name="[4d]"></a>__ListAdd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_scheduler.o(i.__ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddAfter
</UL>

<P><STRONG><a name="[95]"></a>My_MemCopy</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, my_task.o(i.My_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = My_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskCreate
</UL>

<P><STRONG><a name="[7b]"></a>ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_queue.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Queue_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_QueueCreate
</UL>

<P><STRONG><a name="[7a]"></a>My_GetQueueResource</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, my_queue.o(i.My_GetQueueResource))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_QueueCreate
</UL>

<P><STRONG><a name="[78]"></a>ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_mutex.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MutexCreate
</UL>

<P><STRONG><a name="[77]"></a>My_GetMutexResource</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, my_mutex.o(i.My_GetMutexResource))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_MutexCreate
</UL>

<P><STRONG><a name="[8c]"></a>ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_sem.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemCreate
</UL>

<P><STRONG><a name="[90]"></a>ListIsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_sem.o(i.ListIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemRelease
</UL>

<P><STRONG><a name="[8b]"></a>My_GetSemResource</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, my_sem.o(i.My_GetSemResource))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemCreate
</UL>

<P><STRONG><a name="[8e]"></a>__My_SemGet</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, my_sem.o(i.__My_SemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __My_SemGet &rArr; My_TaskReadyToBlock &rArr; My_AddTaskToTimeoutBlockedList &rArr; My_AddTaskToTimeSortList &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCH_IsInterruptContext
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_GetCurrentTime
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TaskReadyToBlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Schedule
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_IsSchedulerSuspending
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SemGet
</UL>

<P><STRONG><a name="[50]"></a>ListAddBefore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, my_timer.o(i.ListAddBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTimerToManager
</UL>

<P><STRONG><a name="[a1]"></a>ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_timer.o(i.ListDelete))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
</UL>

<P><STRONG><a name="[9e]"></a>ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_timer.o(i.ListInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCreate
</UL>

<P><STRONG><a name="[60]"></a>ListIsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_timer.o(i.ListIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCheck
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTimerToManager
</UL>

<P><STRONG><a name="[5f]"></a>My_AddTimerToManager</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, my_timer.o(i.My_AddTimerToManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = My_AddTimerToManager &rArr; ListAddBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ListAdd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListIsEmpty
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskEntry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerStart
</UL>

<P><STRONG><a name="[9d]"></a>My_GetTimerResource</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, my_timer.o(i.My_GetTimerResource))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerCreate
</UL>

<P><STRONG><a name="[a0]"></a>My_MemCopy</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, my_timer.o(i.My_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = My_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_TimerTaskCreate
</UL>

<P><STRONG><a name="[51]"></a>__ListAdd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_timer.o(i.__ListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_AddTimerToManager
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddBefore
</UL>

<P><STRONG><a name="[3e]"></a>prvTaskExitError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortRaiseBASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[c0]"></a>vPortRaiseBASEPRI</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortRaiseBASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[bf]"></a>My_MemCopy</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, main.o(i.My_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = My_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>SetupHardware</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, platform.o(i.SetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetupHardware &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformInit
</UL>

<P><STRONG><a name="[ba]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[bc]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bb]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
